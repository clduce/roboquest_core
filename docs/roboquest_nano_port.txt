Start with a Jetson Nano and a 16 GB microSD.

Original RaspPi 4B RoboQuest image is at:
https://www.dropbox.com/sh/evnzuc834vnjjmj/AABx1pD6jgx494rnO99IorSBa?dl=0

Nvidia doesn't support ubuntu Focal for the base OS, so this procedure
creates a Docker image with ubuntu Focal and ROS Noetic.

0. Use the Nvidia SDK Manager to provision the Jetson Nano

    Configure the docker daemon to allow connections from other hosts:
    sudo systemctl edit docker.service
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2376

	sudo systemctl daemon-reload
    sudo systemctl restart docker.service

1. Start with the ros:noetic-ros-core-focal Docker image

    - add group i2c and assign it to /dev/i2c-1
        sudo addgroup i2c
        sudo chgrp i2c /dev/i2c-1
    - add user ubuntu to groups: i2c

2. add OS packages and configure hardware
    sudo apt install python3-smbus python3-rpi.gpio
    sudo apt install python3-networkmanager v4l-utils
    sudo apt install python3-gpiozero libraspberrypi-bin

    # After installing python3-networkmanager, replace
    # /usr/lib/python3/dist-packages/NetworkManager.py
    # with catkin_ws/src/roboquest_core/patches/NetworkManager.py.
    # See https://github.com/alex-eri/python-networkmanager/pull/1/files

3. Install extra ROS packages and RobotConsole dependencies

    sudo apt install ros-noetic-audio-common
    sudo apt install nodejs npm python3-socketio

    mkdir -p ~/catkin_ws/src
    cd ~/catkin_ws
    catkin_make

4. label this Docker image as ros_base

    docker build -t ros_base -f Dockerfile.ros_base .

5. Install Robot Console

    cd ~/catkin_ws/src
    git clone https://github.com/clduce/RobotConsole
    mkdir -p roboquest_ui/src
    add CMakeLists.txt and package.xml
    mv RobotConsole roboquest_ui/src

    npm i # 40 minutes
    npm audit fix

6. label this Docker image as robot_console

    docker build -t robot_console -f Dockerfile.robot_console .

7. Install roboquest_core

    RoboQuest
    -----------------------------------
    cd ~/catkin_ws/src
    git clone https://github.com/clduce/roboquest_core

    # ~/catkin_ws/src/roboquest_core/nodes/roboquest_core/servo_settings.py
    # ~/catkin_ws/src/roboquest_ui/src/RobotConsole/hardcoded_settings.json

8. label this Docker image as roboquest

    docker build -t roboquest -f Dockerfile.roboquest .

9. disable the serial console in the base OS

    The RoboQuest PiHAT uses that UART

    Didn't figure out how to permanently disable the serial console.
    Instead, stop it via systemctl before starting the application.

    edit /boot/extlinux/extlinux.conf and remove the ttyS0
    console entry.

    systemctl stop nvgetty
    systemctl disable nvgetty
    systemctl stop serial-getty
    systemctl disable serial-getty

    to verify the HAT serial port, connect an FTDI to 8 and 10,
    9 for Ground. Run

python3 -m serial.tools.miniterm /dev/ttyUSB0 57600

and watch for:

$$SCREEN 1 0
$$TELEM 12.42 0.12 0.16 1.64 1.63 1.63 1.62 0.00 1
$$TELEM 12.42 0.12 0.16 1.64 1.63 1.62 1.61 0.00 1

10. setup the base OS

    On the Jetson Nano base OS:

    1. mkdir /home/ubuntu/catkin_ws/src
    2. cd /home/ubuntu/catkin_ws/src
    3. git clone https://github.com/clduce/roboquest_core
    4. cd roboquest_core
    5. ./scripts/setup_base_OS.bash


11. Run it

    - docker run \
        -it \
        --name roboquest \
        --privileged \
        --rm \
        --net=host \
        --device /dev/video0 \
        --device /dev/gpiochip0 \
        --device /dev/gpiochip1 \
        --device /dev/ttyS0 \
        roboquest \
        /bin/bash --login

    - systemctl stop serial-getty@ttyS0.service
    - chgrp dialout /dev/ttyS0
    - chmod 0660 /dev/ttyS0
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/src/catkin_ws/src/roboquest_ui/node_modules/opencv-build/opencv/build/lib
    - source /usr/src/catkin_ws/devel/setup.bash
    - roslaunch roboquest_ui server.launch
